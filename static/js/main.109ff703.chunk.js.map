{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","lazy","GST","Contact","GstBuy","schemaMarkup","name","alternateName","url","App","history","require","createBrowserHistory","useEffect","ReactGa","initialize","pageview","window","location","pathname","search","Fragment","Helmet","type","JSON","stringify","fallback","className","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ycAmBMA,EAAOC,gBAAK,kBAAM,sDAClBC,EAAMD,gBAAK,kBAAM,gCACjBE,EAAUF,gBAAK,kBAAM,sDACrBG,EAASH,gBAAK,kBAAM,gCAEpBI,EAAe,CACnB,WAAY,qBACZ,QAAS,MACTC,KACE,gGACFC,cAAe,yBACfC,IAAK,4BAmCQC,MAhCf,WACE,IAAMC,EAAUC,EAAQ,GAAWC,qBAOnC,OALAC,qBAAU,WACRC,IAAQC,WAAW,kBAEnBD,IAAQE,SAASC,OAAOC,SAASC,SAAWF,OAAOC,SAASE,UAC3D,IAED,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,KACE,4BAAQC,KAAK,uBACVC,KAAKC,UAAUpB,KAGpB,kBAAC,IAAD,CAAQK,QAASA,GACf,kBAAC,WAAD,CAAUgB,SAAU,yBAAKC,UAAU,UAEjC,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,IACjC,kBAAC,IAAD,CAAO6B,KAAK,oBAAoBC,UAAW5B,IAC3C,kBAAC,IAAD,CAAO2B,KAAK,WAAWC,UAAW3B,IAClC,kBAAC,IAAD,CAAO0B,KAAK,WAAWC,UAAW1B,UC5C5B2B,QACW,cAA7Bd,OAAOC,SAASc,UAEe,UAA7Bf,OAAOC,SAASc,UAEhBf,OAAOC,SAASc,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.109ff703.chunk.js","sourcesContent":["import React, { useEffect, Suspense, lazy } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport \"./App.css\";\nimport \"./style/css/bootstrap.min.css\";\n//import \"./style/css/plugins.css\";\nimport \"./style/revolution/css/settings.css\";\nimport \"./style/revolution/css/layers.css\";\nimport \"./style/revolution/css/navigation.css\";\nimport \"./style/type/type.css\";\nimport \"./style.css\";\nimport \"./style/css/font/font2.css\";\nimport ReactGa from \"react-ga\";\n//import Navbar from \"./components/navbar\";\n\nconst Home = lazy(() => import(\"./components/home\"));\nconst GST = lazy(() => import(\"./pages/gst\"));\nconst Contact = lazy(() => import(\"./pages/contact\"));\nconst GstBuy = lazy(() => import(\"./pages/gstbuy\"));\n\nconst schemaMarkup = {\n  \"@context\": \"http://schema.org/\",\n  \"@type\": \"NGO\",\n  name:\n    \"Track the spread of Coronavirus (COVID-19) in India (district level to state level) and World\",\n  alternateName: \"COVID INDIA STATISTICS\",\n  url: \"https://pandemic2020.in/\",\n};\n\nfunction App() {\n  const history = require(\"history\").createBrowserHistory;\n\n  useEffect(() => {\n    ReactGa.initialize(\"UA-161766535-2\");\n    // UA-163288419-1\n    ReactGa.pageview(window.location.pathname + window.location.search);\n  }, []);\n  return (\n    <React.Fragment>\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaMarkup)}\n        </script>\n      </Helmet>\n      <Router history={history}>\n        <Suspense fallback={<div className=\"lazy\"></div>}>\n\n          <main>\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/gst-registration\" component={GST} />\n              <Route path=\"/contact\" component={Contact} />\n              <Route path=\"/gst-buy\" component={GstBuy} />\n            </Switch>\n          </main>\n        </Suspense>\n      </Router>\n    </React.Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}